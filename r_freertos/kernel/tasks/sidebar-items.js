initSidebarItems({"constant":[["taskEVENT_LIST_ITEM_VALUE_IN_USE",""]],"enum":[["eTaskState","Enumerate states of task."]],"fn":[["TCB_set_pxStack","Set pxStack of target tcb."],["pcTaskGetName","Get name of target task."],["prvAddCurrentTaskToDelayedList","Add current task to delayed list."],["prvAddNewTaskToReadyList","Add new task to ready list."],["prvAddTaskToReadyList","Add target task to ready list."],["prvGetTCBFromHandle","Get tcb from handle, return current tcb if handle is None."],["prvIdleTask","Idle task function."],["prvInitialiseNewTask","Initialise new task."],["prvResetNextTaskUnblockTime","Reset NextTaskUnblockTime."],["prvTaskIsTaskSuspended","Return if target task is suspended."],["pvTaskIncrementMutexHeldCount","Increase current task’s mutex count.  Return handle of current task."],["pxPortInitialiseStack","initialise task stack space ( Extern C )"],["taskRECORD_READY_PRIORITY","Set max uxTopReadyPriority. Deprecated in current implement."],["taskSELECT_HIGHEST_PRIORITY","Find highest priority with valid task."],["taskSELECT_HIGHEST_PRIORITY_TASK","Set current tcb to task with highest priority."],["taskSWITCH_DELAYED_LISTS","In case of mtime overflow, swap delayed list and overflow list."],["taskYield","Yield in task."],["uxTaskPriorityGet","Get priority of target task."],["uxTaskResetEventItemValue","Reset event item value. Return original item value."],["vTaskDelay","Delay Task xTicksToDelay Relativly. Used in task function."],["vTaskDelete","Delete target task."],["vTaskEnterCritical","Enter task critical area."],["vTaskExitCritical","Exit task critical area."],["vTaskInternalSetTimeOutState","Set pxTimeOut to current time in ISR."],["vTaskPlaceOnEventList","Place current task on event list and delay it."],["vTaskPlaceOnUnorderedEventList","Place target task on unordered event list. Used in event group."],["vTaskPriorityDisinheritAfterTimeout","Disinherit and recover original priority for mutex holder task after timeout.  Disinherit priority only when no other mutex are held.  Doed not change mutex held number."],["vTaskPrioritySet","Set priority of target task."],["vTaskRemoveFromUnorderedEventList","Remove target task from unordered event list. Used in event group."],["vTaskResume","Resume target task."],["vTaskResumeAll","Resume scheduler."],["vTaskSetTimeOutState","Set pxTimeOut to current time in task."],["vTaskStartScheduler","Start scheduler."],["vTaskSuspend","Suspend task until resumed. Assert params is not Option::None."],["vTaskSuspendAll","Suspend scheduler."],["xPortSysTickHandler","Manually force tick increment outside ISR."],["xTaskCheckForTimeOut","Return if timeout has been reached."],["xTaskCreate","Create task (dynamic)."],["xTaskCreateStatic","Create task (static)."],["xTaskDelayUntil","Delay task until pxPreviousWakeTime+pxPreviousWakeTime. Used in task function."],["xTaskIncrementTick","Increase tick and free delayed task."],["xTaskPriorityDisinherit","Disinherit and recover original priority for mutex holder task  Disinherit priority only when no other mutex are held  Does not change mutex held number. Return if disinherit was successful."],["xTaskPriorityInherit","Inherit mutex holder task’s priority to current task’s priority.  Return if the inherit was successful."],["xTaskRemoveFromEventList","Remove first task from event list, and insert the task to ready list."]],"static":[["XSCHEDULERRUNNING",""],["tskIDLE_PRIORITY",""],["uxCurrentNumberOfTasks",""],["uxSchedulerSuspended",""],["xNextTaskUnblockTime",""],["xNumOfOverflows",""],["xPendedTicks",""],["xSchedulerRunning",""],["xTickCount",""],["xYieldPending",""]],"struct":[["TimeOut",""],["tskTaskControlBlock","tskTaskControlBlock"]],"type":[["Param_link",""],["StackType_t",""],["StackType_t_link",""],["TCB_t",""],["TCB_t_link",""],["TaskFunction_t",""],["TaskHandle_t",""],["UBaseType_t",""],["tskTCB",""]]});