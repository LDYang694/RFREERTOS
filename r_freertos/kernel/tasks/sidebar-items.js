initSidebarItems({"constant":[["taskEVENT_LIST_ITEM_VALUE_IN_USE",""]],"enum":[["eTaskState",""]],"fn":[["TCB_set_pxStack","set pxStack of target tcb"],["prvAddCurrentTaskToDelayedList","add current task to delayed list"],["prvAddNewTaskToReadyList","add new task to ready list"],["prvAddTaskToReadyList","add task to ready list"],["prvGetTCBFromHandle","get tcb from handle, return current tcb if handle is None"],["prvIdleTask","idle task function"],["prvInitialiseNewTask","initialise new task"],["prvResetNextTaskUnblockTime","reset NextTaskUnblockTime"],["prvTaskIsTaskSuspended",""],["pvTaskIncrementMutexHeldCount","increase current task’s mutex count  return handle of current task"],["pxPortInitialiseStack","initialise task stack space ( Extern C )"],["taskRECORD_READY_PRIORITY","set max uxTopReadyPriority"],["taskSELECT_HIGHEST_PRIORITY","find highest priority with valid task"],["taskSELECT_HIGHEST_PRIORITY_TASK","set current tcb to task with highest priority when want to start highest priority task call taskSELECT_HIGHEST_PRIORITY_TASK"],["taskSWITCH_DELAYED_LISTS","in case of mtime overflow, swap delayed list and overflow list"],["taskYield","yield in task"],["uxTaskPriorityGet","get priority of target task"],["uxTaskResetEventItemValue","reset event item value return original item value"],["vTaskDelay","Delay Task xTicksToDelay Relativly used in task function"],["vTaskDelete","delete target task"],["vTaskEnterCritical","Enter task critical area"],["vTaskExitCritical","Exit task critical area"],["vTaskInternalSetTimeOutState","set pxTimeOut to current time (in kernel)"],["vTaskPlaceOnEventList","place current task on event list and delay it"],["vTaskPlaceOnUnorderedEventList","place target task on unordered event list used in event groups"],["vTaskPriorityDisinheritAfterTimeout","disinherit and recover original priority for mutex holder task after timeout disinherit priority only when no other mutex are held  do not change mutex held number"],["vTaskPrioritySet","set priority of target task"],["vTaskRemoveFromUnorderedEventList","remove target task from unordered event list used in event groups"],["vTaskResume","resume target task"],["vTaskResumeAll","resume scheduler"],["vTaskSetTimeOutState","set pxTimeOut to current time (in task)"],["vTaskStartScheduler","start scheduler when create all tasks call vTaskStartScheduler"],["vTaskSuspend","suspend task until resumed assert params is not Option::None"],["vTaskSuspendAll","suspend scheduler"],["xPortSysTickHandler",""],["xTaskCheckForTimeOut","return if timeout has been reached"],["xTaskCreate","create task dynamic"],["xTaskCreateStatic","Create tasks static"],["xTaskDelayUntil","Delay task until pxPreviousWakeTime+pxPreviousWakeTime used in task function"],["xTaskIncrementTick","tick increment, free delayed task"],["xTaskPriorityDisinherit","disinherit and recover original priority for mutex holder task  disinherit priority only when no other mutex are held  do not change mutex held number return if disinherit was successful"],["xTaskPriorityInherit","inherit mutex holder task’s priority to current task’s priority  return if the inherit was successful"],["xTaskRemoveFromEventList","remove first task from event list, and insert the task to ready list"]],"static":[["XSCHEDULERRUNNING",""],["tskIDLE_PRIORITY",""],["uxCurrentNumberOfTasks",""],["uxSchedulerSuspended",""],["xNextTaskUnblockTime",""],["xNumOfOverflows",""],["xPendedTicks",""],["xSchedulerRunning",""],["xTickCount",""],["xYieldPending",""]],"struct":[["TimeOut",""],["tskTaskControlBlock","tskTaskControlBlock"]],"type":[["Param_link",""],["StackType_t",""],["StackType_t_link",""],["TCB_t",""],["TCB_t_link",""],["TaskFunction_t",""],["TaskHandle_t",""],["UBaseType_t",""],["tskTCB",""]]});