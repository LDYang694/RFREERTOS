#![allow(warnings)]
extern crate cc;
use std::env;
fn main() {
    let target = env::var("TARGET").expect("TARGET was not set");
    // if (target.contains("riscv32imac")) {
    //     cc::Build::new()
    //         .compiler("riscv64-unknown-elf-gcc")
    //         .flag("-w")
    //         .file("src/portable/portASM.S")
    //         .file("src/kernel/start.S")
    //         .flag("-march=rv32ima")
    //         .file("src/kernel/config_resolve.c")
    //         .file("src/ffi/main_blinky.c")
    //         .file("src/ffi/riscv-virt.c")
    //         .file("src/tests/td_task.c")
    //         .file("src/tests/test.c")
    //         .file("src/tests/queue/queue_receive_blocking_utest.c")
    //         .file("src/tests/queue/queue_receive_nonblocking_utest.c")
    //         .file("src/tests/queue/queue_reset_utest.c")
    //         .file("src/tests/queue/queue_send_blocking_utest.c")
    //         .file("src/tests/queue/queue_send_nonblocking_utest.c")
    //         .file("src/tests/queue/queue_status_utest.c")
    //         .file("src/tests/queue/queue_delete_dynamic_utest.c")
    //         .file("src/tests/queue/queue_delete_static_utest.c")
    //         .file("src/tests/queue/queue_create_dynamic_utest.c")
    //         .file("src/tests/queue/queue_create_static_utest.c")
    //         .file("src/tests/queue/binary_semaphore_utest.c")
    //         .file("src/tests/queue/counting_semaphore_utest.c")
    //         .file("src/tests/queue/semaphore_common_utest.c")
    //         .file("src/tests/queue/semaphore_create_utest.c")
    //         .compile("portASM");
    // } else if (target.contains("riscv64imac")) {
    //     cc::Build::new()
    //         .compiler("riscv64-unknown-elf-gcc")
    //         .file("src/portable/portASM.S")
    //         .file("src/kernel/start.S")
    //         .file("src/kernel/config_resolve.c")
    //         .flag("-march=rv64ima")
    //         .flag("-mabi=lp64")
    //         .compile("portASM");
    // }
    //D1
    {
        cc::Build::new()
            .no_default_flags(true)
            .compiler("riscv64-unknown-elf-xuantie-gcc")
            .include("src/bare")
            .include("src/kernel")
            .file("src/kernel/config_resolve.c")
            .file("src/bare/clint.c")
            .file("src/bare/clk.c")
            .file("src/bare/common.c")
            .file("src/bare/gpio.c")
            .file("src/bare/interrupt.c")
            .file("src/bare/main.c")
            .file("src/bare/printf.c")
            .file("src/bare/start.S")
            .file("src/bare/timer.c")
            .file("src/bare/trap.S")
            .file("src/bare/uart.c")
            .file("src/portable/portASM.S")
            // .flag("-Wall")
            .flag("-O2")
            .flag("-fno-omit-frame-pointer")
            .flag("-ggdb")
            .flag("-march=rv64gcvxtheadc")
            .flag("-mabi=lp64d")
            .flag("-mtune=c906")
            .flag("-MD")
            .flag("-mcmodel=medany")
            .flag("-ffreestanding")
            .flag("-fno-common")
            .flag("-nostdlib")
            .flag("-mno-relax")
            .flag("-fno-stack-protector")
            .flag("-fno-pie")
            .flag("-no-pie")
            .compile("bare");
    }
}
