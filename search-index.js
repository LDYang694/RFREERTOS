var searchIndex = JSON.parse('{\
"r_freertos":{"doc":"","t":[12,12,11,11,11,11,5,11,11,11,11,14,14,14,11,11,0,5,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,5,3,5,3,5,14,14,14,5,5,5,5,5,0,11,11,11,11,11,11,14,14,7,7,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,7,3,11,5,11,11,11,11,11,11,5,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,3,6,11,11,11,11,11,17,17,17,17,11,11,5,11,11,11,11,12,12,12,5,5,11,5,5,12,3,3,3,3,13,3,3,3,13,3,4,13,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,12,12,12,12,12,11,11,11,11,11,11,11,5,12,5,5,12,12,3,12,11,11,11,11,5,11,11,11,5,5,17,7,7,5,5,5,5,5,7,7,7,7,5,7,5,5,7,5,5,6,17,17,17,17,17,17,6,6,6,17,17,17,17,17,17,17,3,6,6,11,11,12,12,11,11,11,5,12,12,12,12,12,17,5,5,5,5,11,5,5,5,17,17,17,17,17,17,17,17,17,17,11,11,11,12,12,12,12,12,5,12,6,5,11,5,11,5,11,5,5,5,5,5,5,5,5,12,12,17,5,5,5,5,6,5,7,7,5,5,6,6,6,5,6,6,6,6,3,6,7,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,4,11,11,11,11,11,11,11,12,5,5,5,5,5,5,5,5,5,5,5,12,12,17,5,5,5,5,5,11,11,11,11,11,11,11,7,6,3,11,11,11,12,12,7,12,12,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,7,7,12,7,5,7,12,5,5,5,5,5,5,5,5,7,12,7,0,0,12,11,11,11,11,11,3,5,5,5,5,5,5,5,5,5,5,11,11,11,5,12,12,11,11,11,11,11,11,11,11,5,11,11,3,7,3,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11],"n":["__private_field","__private_field","borrow","borrow","borrow_mut","borrow_mut","delay","deref","deref","from","from","get_current_task_handle","get_scheduler_running","get_uxCurrentNumberOfTasks","into","into","kernel","main","main_new","main_new_1","mtCOVERAGE_TEST_MARKER","portCLEAR_INTERRUPT_MASK_FROM_ISR","portDISABLE_INTERRUPTS","portENABLE_INTERRUPTS","portEND_SWITCHING_ISR","portENTER_CRITICAL","portEXIT_CRITICAL","portGET_HIGHEST_PRIORITY","portMEMORY_BARRIER","portNOP","portRECORD_READY_PRIORITY","portRESET_READY_PRIORITY","portYIELD","portYIELD_FROM_ISR","portYIELD_WITHIN_API","port_set_interrupt_mask_from_isr","prvLockQueue","queueYIELD_IF_USING_PREEMPTION","task1","task1handler","task2","task2handler","task3","taskENTER_CRITICAL","taskEXIT_CRITICAL","taskYIELD_IF_USING_PREEMPTION","task_rec","task_send","task_temp","testfunc1","testfunc2","tests","try_from","try_from","try_into","try_into","type_id","type_id","vSemaphoreDelete","vTaskMissedYield","xEvent","xQueue","xSemaphoreCreateBinary","xSemaphoreGive","xSemaphoreTake","FREERTOS","allocator","config","event_group","kernel","linked_list","ns16550","portable","portmacro","projdefs","queue","riscv_virt","semphr","tasks","Buddy_System_Allocator","DYNAMIC_ALLOCATOR","SimpleAllocator","alloc","alloc_error_handler","alloc_zeroed","borrow","borrow_mut","dealloc","empty","from","init_heap","into","realloc","try_from","try_into","type_id","CLINT_ADDR","CLINT_MSIP","CLINT_MTIME","CLINT_MTIMECMP","CONFIG_CPU_CLOCK_HZ","CONFIG_ISR_STACK_SIZE_WORDS","CONFIG_MTIMECMP_BASE_ADDRESS","CONFIG_MTIME_BASE_ADDRESS","CONFIG_TICK_RATE_HZ","KERNEL_HEAP_SIZE","LSR_BI","LSR_DR","LSR_EIRF","LSR_FE","LSR_OE","LSR_PE","LSR_TEMT","LSR_THRE","PORT_ISR_STACK_FILL_BYTE","PRIM_HART","REG_BRDH","REG_BRDL","REG_FCR","REG_IER","REG_IIR","REG_LCR","REG_LSR","REG_MCR","REG_MSR","REG_RBR","REG_SCR","REG_THR","USER_STACK_SIZE","configMAX_PRIORITIES","EventBits","EventGroupDefinition","EventGroupHandle","borrow","borrow_mut","clone","clone_into","default","eventCLEAR_EVENTS_ON_EXIT_BIT","eventEVENT_BITS_CONTROL_BYTES","eventUNBLOCKED_DUE_TO_BIT_SET","eventWAIT_FOR_ALL_BITS","from","into","prvTestWaitCondition","to_owned","try_from","try_into","type_id","ucStaticallyAllocated","uxEventBits","uxEventGroupNumber","vEventGroupDelete","xEventGroupClearBits","xEventGroupCreate","xEventGroupSetBits","xEventGroupWaitBits","xTasksWaitingForBits","CURRENT_TCB","DELAYED_TASK_LIST","IDLE_STACK","IDLE_p","Not_Started","OVERFLOW_DELAYED_TASK_LIST","PENDING_READY_LIST","READY_TASK_LISTS","Running","SUSPENDED_TASK_LIST","SchedulerState","Suspended","TASK1_STACK","TASK2_STACK","TASK3_STACK","TCB1_p","TCB2_p","TCB3_p","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kernel_init","panic","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ListItemLink","ListItemOwnerWeakLink","ListItemT","ListItemWeakLink","ListRealLink","ListT","ListWeakLink","XList","XListItem","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","fmt","fmt","from","from","get_owner_of_head_entry","get_owner_of_next_entry","insert","insert_end","into","into","list_current_list_length","list_get_end_marker","list_get_head_entry","list_get_num_items","list_get_owner_of_head_entry","list_get_owner_of_next_entry","list_get_pxindex","list_get_value_of_head_entry","list_is_contained_within","list_is_empty","list_item_get_container","list_item_get_next","list_item_get_owner","list_item_get_pre","list_item_get_value","list_item_set_container","list_item_set_next","list_item_set_owner","list_item_set_pre","list_item_set_value","list_set_pxindex","new","pv_owner","px_container","px_index","px_next","px_previous","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ux_list_remove","ux_number_of_items","v_list_insert","v_list_insert_end","x_item_value","x_list_end","Device","addr","borrow","borrow_mut","from","into","readb","try_from","try_into","type_id","v_out_ns16550","writeb","ULL_MACHINE_TIMER_COMPARE_REGISTER_BASE","ULL_NEXT_TIME","X_ISRSTACK","auto_set_currentTcb","get_current_tcb","get_mtime","is_current_tcb","is_current_tcb_raw","pullMachineTimerCompareRegister","pullNextTime","pxCurrentTCB","pxCurrentTCB_","set_current_tcb","uxTimerIncrementsForOneTick","vTaskSwitchContext","v_port_setup_timer_interrupt","xISRStackTop","xPortStartFirstTask","x_port_start_scheduler","BaseType","PORT_BYTE_ALIGNMENT","PORT_CRITICAL_NESTING_IN_TCB","PORT_MAX_DELAY","PORT_STACK_GROWTH","PORT_TICK_PERIOD_MS","PORT_TICK_TYPE_IS_ATOMIC","StackType","TickType","UBaseType","USE_PORT_OPTIMISED_TASK_SELECTION","errQUEUE_EMPTY","errQUEUE_FULL","pdFAIL","pdFALSE","pdPASS","pdTRUE","QueueDefinition","QueueHandle_t","Queue_t","borrow","borrow_mut","cRxLock","cTxLock","default","from","into","memcpy","pcHead","pcMesQueue","pcReadFrom","pcTail","pcWriteTo","pdPass","prvCopyDataFromQueue","prvCopyDataToQueue","prvGetDisinheritPriorityAfterTimeout","prvInitialiseNewQueue","prvInitialiseNewQueue","prvIsQueueEmpty","prvIsQueueFull","prvUnlockQueue","queueINT8_MAX","queueLOCKED_UNMODIFIED","queueOVERWRITE","queueQUEUE_TYPE_BASE","queueQUEUE_TYPE_BINARY_SEMAPHORE","queueQUEUE_TYPE_COUNTING_SEMAPHORE","queueQUEUE_TYPE_MUTEX","queueQUEUE_TYPE_RECURSIVE_MUTEX","queueSEND_TO_BACK","queueUNLOCKED","try_from","try_into","type_id","ucQueueType","uxItemSize","uxLength","uxMessagesWaiting","uxRecursiveCallCount","vQueueDelete","xMutexHolder","xQUEUE","xQueueCreate","xQueueCreate","xQueueGenericCreate","xQueueGenericCreate","xQueueGenericReset","xQueueGenericReset","xQueueGenericSend","xQueueGenericSendFromISR","xQueuePeek","xQueuePeekFromISR","xQueueReceive","xQueueReceiveFromISR","xQueueSend","xQueueSendFromISR","xTasksWaitingToReceive","xTasksWaitingToSend","NS16550_ADDR","handle_trap","print","vSendString","x_get_core_id","SemaphoreHandle_t","prvInitialiseMutex","semGIVE_BLOCK_TIME","semSEMAPHORE_QUEUE_ITEM_LENGTH","xQueueCreateMutex","xSemaphoreCreateCounting","Param_link","StackType_t","StackType_t_link","TCB_set_pxStack","TCB_t","TCB_t_link","TaskFunction_t","TaskHandle_t","TimeOut","UBaseType_t","XSCHEDULERRUNNING","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","eBlocked","eDeleted","eInvalid","eReady","eRunning","eSuspended","eTaskState","fmt","from","from","from","into","into","into","pcTaskName","prvAddCurrentTaskToDelayedList","prvAddNewTaskToReadyList","prvAddTaskToReadyList","prvGetTCBFromHandle","prvIdleTask","prvInitialiseNewTask","prvInitialiseTaskLists","prvResetNextTaskUnblockTime","prvTaskIsTaskSuspended","pvTaskIncrementMutexHeldCount","pxPortInitialiseStack","pxStack","pxTopOfStack","taskEVENT_LIST_ITEM_VALUE_IN_USE","taskRECORD_READY_PRIORITY","taskSELECT_HIGHEST_PRIORITY","taskSELECT_HIGHEST_PRIORITY_TASK","taskSWITCH_DELAYED_LISTS","taskYield","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tskIDLE_PRIORITY","tskTCB","tskTaskControlBlock","type_id","type_id","type_id","uxBasePriority","uxCriticalNesting","uxCurrentNumberOfTasks","uxMutexesHeld","uxPriority","uxSchedulerSuspended","uxTaskPriorityGet","uxTaskResetEventItemValue","vTaskDelay","vTaskDelete","vTaskEnterCritical","vTaskExitCritical","vTaskInternalSetTimeOutState","vTaskPlaceOnEventList","vTaskPlaceOnUnorderedEventList","vTaskPriorityDisinheritAfterTimeout","vTaskPrioritySet","vTaskRemoveFromUnorderedEventList","vTaskResume","vTaskResumeAll","vTaskSetTimeOutState","vTaskStartScheduler","vTaskSuspend","vTaskSuspendAll","xEventListItem","xNextTaskUnblockTime","xNumOfOverflows","xOverflowCount","xPendedTicks","xPortSysTickHandler","xSchedulerRunning","xStateListItem","xTaskCheckForTimeOut","xTaskCreate","xTaskCreateStatic","xTaskDelayUntil","xTaskIncrementTick","xTaskPriorityDisinherit","xTaskPriorityInherit","xTaskRemoveFromEventList","xTickCount","xTimeOnEntering","xYieldPending","test_list","test_queue","__private_field","borrow","borrow_mut","deref","from","into","task1handler","test_func_list","test_macro_listGET_NEXT","test_macro_listGET_OWNER_OF_HEAD_ENTRY","test_macro_listIS_CONTAINED_WITHIN","test_macro_listSET_GET_LIST_ITEM_VALUE","test_macros_list_SET_GET_LIST_ITEM_OWNER","test_main_list","test_uxListRemove_success","test_vListInsertEnd_Success_1_item","test_vListInsert_success_1_item","try_from","try_into","type_id","validate_empty_list","__private_field","__private_field","borrow","borrow","borrow_mut","borrow_mut","deref","deref","from","from","high_priority_send_task","into","into","task1handler","testQueue","testTask","test_func_queue","test_macro_xQueueCreate_oneItem_oneLength","test_macro_xQueueSendFromISR_locked","test_main_queue","test_xQueuePeekFromISR_success","test_xQueuePeek_fail_empty","test_xQueuePeek_xQueueReceive_waiting_higher_priority","test_xQueuePeek_zeroItemSize_full","test_xQueueReceiveFromISR_locked","test_xQueueReceive_fail_empty","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["r_freertos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel","","","","","","","","","","","","","","r_freertos::kernel::allocator","","","","","","","","","","","","","","","","","r_freertos::kernel::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::event_group","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::kernel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::ns16550","","","","","","","","","","","","r_freertos::kernel::portable","","","","","","","","","","","","","","","","","","","r_freertos::kernel::portmacro","","","","","","","","","","","r_freertos::kernel::projdefs","","","","","","r_freertos::kernel::queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::riscv_virt","","","","","r_freertos::kernel::semphr","","","","","","r_freertos::kernel::tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::tests","","r_freertos::tests::test_list","","","","","","","","","","","","","","","","","","","","","r_freertos::tests::test_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","lock queue  accept QueueHandle_t","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Application specific definitions.  equal to …","","lazy static globals and kernel macros","linked list implementation and api","serial interface api","portable apis","portable macros","project defines","queue impletation and api","chip specific api","","task control api","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","get owner of head entry in list","get owner of next entry in list  move current index to …","insert target item into list in ascending order of value  …","insert target item into end of list","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","get num of item in list(Arc)","get end marker of list  end marker is not a valid item","get head entry of list  head entry is the first valid item …","get num of item in list(Weak)","get owner of head entry in list  do not alter current index","get owner of next entry in list  move current index to …","get current index of list","","","return if the list is empty","get container of item","get next item","get owner of item  owner is a tskTaskControlBlock object","get previous item","get value of item  insert() place item in order of values","set container of item","set next item","set container of item","set previous item","set value of item  insert() place item in order of values","set current index of list","","","","","","","","","","","","","","remove target item from its container return number of …","","insert target item into list in ascending order of value  …","insert target item into end of list","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","read byte from target address","","","","write byte to serial interface  stall until writing is …","write byte to target address","","","","copy current tcb to pxCurrentTCB for c interface","get current tcb","get current mtime","return if target tcb is current tcb","","","","","","set current tcb  use with auto_set_currentTcb()","","switch context","setup timer interrupt","","","start up scheduler","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","initialise new queue","","","","","","","","","","","","","","","","","","","","","","","","","","create queue  interface for user","","create queue","","reset target queue","","","","","","","","","","","","","","","","","","","","","","","","","","set pxStack of target tcb","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","add current task to delayed list","add task to ready list","add task to ready list","get tcb from handle, return current tcb if handle is None","idle task function","initialise new task","","reset NextTaskUnblockTime","","increase current task’s mutex count  return handle of …","","","","","","find highest priority with valid task","set current tcb to task with highest priority","in case of mtime overflow, swap delayed list and overflow …","yield in task","","","","","","","","","","","","","","","","","","","","get priority of target task","reset event item value return original item value","","delete target task","","","set pxTimeOut to current time (in kernel)","place current task on event list and delay it","place target task on unordered event list used in event …","disinherit and recover original priority for mutex holder …","set target task’s priority","remove target task from unordered event list used in event …","resume target task","resume scheduler","set pxTimeOut to current time (in task)","start scheduler","suspend task until resumed","suspend scheduler","","","","","","","","","return if timeout has been reached","create task (not static)","create task (static)","delay task until pxPreviousWakeTime+pxPreviousWakeTime ","tick increment, free delayed task","disinherit and recover original priority for mutex holder …","inherit mutex holder task’s priority to current task’s …","remove first task from event list, and insert the task to …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[1,2,1,2,1,2,0,1,2,1,2,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,3,3,3,3,3,3,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,0,0,0,0,4,4,0,4,4,4,4,4,4,4,0,0,4,0,0,4,0,0,0,0,5,0,0,0,5,0,0,5,0,0,0,0,0,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,0,0,0,0,0,0,0,0,20,21,20,21,21,21,20,21,20,21,20,21,21,21,21,21,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,21,20,20,21,20,21,20,21,20,21,0,21,0,0,20,21,0,22,22,22,22,22,0,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,23,23,23,0,23,23,23,23,23,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,0,23,0,0,23,0,23,0,23,0,0,0,0,0,0,0,0,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,24,25,26,26,26,25,26,24,24,24,24,24,24,0,26,24,25,26,24,25,26,26,0,0,0,0,0,0,0,0,0,0,0,26,26,0,0,0,0,0,0,26,24,25,26,24,25,26,0,0,0,24,25,26,26,26,0,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,25,0,0,0,27,27,27,27,27,27,0,0,0,0,0,0,0,0,0,0,0,27,27,27,0,28,29,28,29,28,29,28,29,28,29,0,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,28,29,28,29,28,29],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["u32",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],null,null,null,[[]],[[]],null,[[],["never",0]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],null,[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["layout",3]]],[[["layout",3]],["never",0]],[[["",0],["layout",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["layout",3]]],[[]],[[]],[[]],[[]],[[["",0],["layout",3],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["eventgroupdefinition",3]],[[["",0],["",0]]],[[]],null,null,null,null,[[]],[[]],[[["u32",0],["u32",0],["i32",0]],["i32",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]]]],[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]],["u32",0]],["u32",0]],[[]],[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]],["u32",0]],["u32",0]],[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]],["u32",0],["i32",0],["i32",0],["u32",0]],["u32",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullarc",3]],[[["",0]],["arc",3]],[[["",0]],["arc",3]],[[["",0]],["arc",3]],[[["",0]],["rwlock",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["arc",3]],[[["",0]],["arc",3]],[[["",0]],["arc",3]],[[["",0]],["arc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["panicinfo",3]],["never",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["xlist",3]],[[["",0],["",0]]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["",0]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["",0],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["",0],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[]],[[]],[[["arc",3]],["u32",0]],[[["arc",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["arc",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["weak",3]],["u32",0]],[[["arc",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["arc",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["arc",3]],["u32",0]],[[["arc",3],["arc",3]],["bool",0]],[[["arc",3]],["bool",0]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlist",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["arc",3]],["u32",0]],[[["weak",3],["weak",3,[["rwlock",3,[["xlist",3]]]]]]],[[["weak",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["arc",3],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],[[["weak",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["arc",3],["u32",0]]],[[["weak",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["u32",0]]],null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],["u32",0]],null,[[["arc",3],["arc",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["arc",3],["arc",3,[["rwlock",3,[["xlistitem",3]]]]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["usize",0]],["u8",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["device",3],["u8",0]]],[[["u8",0],["usize",0]]],null,null,null,[[]],[[],["option",4,[["tsktaskcontrolblock",3]]]],[[],["u64",0]],[[["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],["bool",0]],[[["tsktaskcontrolblock",3]],["bool",0]],null,null,null,null,[[["option",4,[["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],null,[[]],[[]],null,null,[[],["i32",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[],["queuedefinition",3]],[[]],[[]],null,null,null,null,null,null,null,[[["queuedefinition",3],["usize",0]]],[[["queuedefinition",3],["usize",0],["i32",0]],["bool",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],["u32",0]],[[["u32",0],["u32",0],["usize",0],["u8",0],["usize",0]]],[[["",0],["u32",0],["u32",0],["u8",0]]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],["bool",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],["bool",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]]],null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]]],null,null,[[["u32",0],["u32",0]],["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0],["u8",0]],["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],[[["u32",0],["u32",0],["u8",0]]],[[["queuedefinition",3],["i32",0]],["i32",0]],[[["",0],["i32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["u32",0],["i32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["i32",0],["i32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["u32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["u32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["i32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["u32",0]],["i32",0]],[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]],["usize",0],["i32",0]],["i32",0]],null,null,null,[[]],[[["str",0]]],[[["str",0]]],[[],["i32",0]],null,[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]]],null,null,[[["u8",0]],["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],[[["u32",0],["u32",0]],["queuedefinition",3]],null,null,null,[[["arc",3],["usize",0]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tsktaskcontrolblock",3]],[[["",0],["",0]]],[[],["timeout",3]],[[]],null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u32",0],["bool",0]]],[[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],[[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["option",4,[["tsktaskcontrolblock",3]]]],[[]],[[["u32",0],["str",0],["u32",0],["option",4,[["usize",0]]],["arc",3],["u32",0],["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[]],[[]],[[["arc",3]],["bool",0]],[[],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],null,null,null,null,[[["u32",0]]],[[],["usize",0]],[[]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["u32",0]],[[],["u32",0]],[[["u32",0]]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],[[]],[[]],[[["timeout",3]]],[[["arc",3],["u32",0]]],[[["arc",3],["u32",0],["u32",0]]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],["u32",0]]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],["u32",0]]],[[["arc",3],["u32",0]]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],[[],["bool",0]],[[["timeout",3]]],[[]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],[[]],null,null,null,null,null,[[]],null,null,[[["timeout",3],["u32",0]],["i32",0]],[[["u32",0],["str",0],["u32",0],["option",4,[["usize",0]]],["u32",0],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["i32",0]],[[["u32",0],["str",0],["u32",0],["option",4,[["usize",0]]],["option",4,[["usize",0]]],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],["u32",0]],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],[[["u32",0],["u32",0]]],[[]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["i32",0]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["i32",0]],[[["arc",3]],["bool",0]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["arc",3,[["rwlock",3,[["xlist",3]]]]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"task1handler"],[3,"task2handler"],[3,"SimpleAllocator"],[3,"EventGroupDefinition"],[4,"SchedulerState"],[3,"READY_TASK_LISTS"],[3,"DELAYED_TASK_LIST"],[3,"OVERFLOW_DELAYED_TASK_LIST"],[3,"SUSPENDED_TASK_LIST"],[3,"PENDING_READY_LIST"],[3,"CURRENT_TCB"],[3,"TASK1_STACK"],[3,"TASK2_STACK"],[3,"TASK3_STACK"],[3,"IDLE_STACK"],[3,"TCB1_p"],[3,"TCB2_p"],[3,"TCB3_p"],[3,"IDLE_p"],[3,"XListItem"],[3,"XList"],[3,"Device"],[3,"QueueDefinition"],[4,"eTaskState"],[3,"TimeOut"],[3,"tskTaskControlBlock"],[3,"task1handler"],[3,"task1handler"],[3,"testTask"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};