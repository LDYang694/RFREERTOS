var searchIndex = JSON.parse('{\
"r_freertos":{"doc":"","t":[12,12,11,11,11,11,11,11,0,11,11,14,14,14,11,11,0,5,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,3,3,14,14,14,5,5,5,11,11,11,11,11,11,14,14,7,7,14,14,14,0,0,0,0,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,12,7,3,11,5,11,11,11,11,11,11,5,11,11,11,11,11,7,7,7,3,3,7,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,12,12,12,12,11,11,11,11,11,11,11,11,3,7,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,6,3,6,11,11,11,11,11,17,17,17,17,11,11,5,11,11,11,11,12,12,12,5,5,11,5,5,12,3,3,3,3,13,3,3,3,13,3,4,13,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,12,12,12,12,12,12,11,11,11,11,11,11,11,5,12,5,5,12,12,17,17,17,17,17,17,3,6,6,11,11,12,12,11,11,11,5,12,12,12,12,12,17,5,5,5,5,11,5,5,5,17,17,17,17,17,17,17,17,17,17,11,11,11,12,12,12,12,12,5,12,6,5,11,5,11,5,11,5,5,5,5,5,5,5,5,12,12,6,5,7,7,5,5,6,6,6,5,6,6,6,6,3,6,7,11,11,11,11,11,11,12,11,11,11,11,13,13,13,13,13,13,4,11,11,11,11,11,11,11,5,12,5,5,5,5,5,5,5,5,5,5,12,12,17,5,5,5,5,5,11,11,11,11,11,11,11,7,6,3,11,11,11,12,12,7,12,12,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,7,7,12,7,5,7,12,5,5,5,5,5,5,5,5,7,12,7,0,0,0,0,3,12,11,11,11,11,5,11,11,11,5,5,3,7,3,12,12,5,11,11,11,11,11,11,11,11,5,5,11,11,5,5,7,7,7,7,5,11,11,11,11,11,11,7,5,5,7,5,5,6,17,17,17,17,17,6,6,6,17,17,5,5,5,5],"n":["__private_field","__private_field","borrow","borrow","borrow_mut","borrow_mut","deref","deref","ffi","from","from","get_current_task_handle","get_scheduler_running","get_uxCurrentNumberOfTasks","into","into","kernel","main","main_blinky","main_new","mtCOVERAGE_TEST_MARKER","portCLEAR_INTERRUPT_MASK_FROM_ISR","portDISABLE_INTERRUPTS","portENABLE_INTERRUPTS","portEND_SWITCHING_ISR","portENTER_CRITICAL","portEXIT_CRITICAL","portGET_HIGHEST_PRIORITY","portMEMORY_BARRIER","portNOP","portRECORD_READY_PRIORITY","portRESET_READY_PRIORITY","portYIELD","portYIELD_FROM_ISR","portYIELD_WITHIN_API","port_set_interrupt_mask_from_isr","portable","prvLockQueue","queueYIELD_IF_USING_PREEMPTION","task1handler","task2handler","taskENTER_CRITICAL","taskEXIT_CRITICAL","taskYIELD_IF_USING_PREEMPTION","task_high_priority","task_low_priority","test_","try_from","try_from","try_into","try_into","type_id","type_id","vSemaphoreDelete","vTaskMissedYield","xEvent","xQueue","xSemaphoreCreateBinary","xSemaphoreGive","xSemaphoreTake","ffi","queue","semphr","tasks","get_str_from_cchar","rustAssert","rustMalloc","rustPrint","rustVSendString","rustYield","QueueHandle_c","cGetQueueRxLock","cGetQueueTxLock","uxQueueMessagesWaiting","uxQueueSpacesAvailable","vQueueDeleteToC","vSetQueueRxLock","vSetQueueTxLock","xQueueCreateToC","xQueueGenericSendToC","xQueueIsQueueEmptyFromISR","xQueueIsQueueFullFromISR","xQueuePeekFromISRToC","xQueuePeekToC","xQueueReceiveFromISRToC","xQueueReceiveToC","xQueueResetToC","xQueueSendFromISRToC","xQueueSendToC","prvInitialiseMutexToC","vSemaphoreDeleteToC","xQueueCreateMutexToC","xSemaphoreCreateBinaryToC","xSemaphoreCreateCountingToC","xSemaphoreGiveToC","xSemaphoreTakeToC","TaskHandle_c","get_task_handle","taskENTER_CRITICAL_ToC","taskEXIT_CRITICAL_ToC","vTaskResumeToC","vTaskSuspendToC","xTaskCreateStaticToC","xTaskCreateToC","xTaskGetTickCountToC","allocator","config","event_group","kernel","linked_list","projdefs","queue","semphr","tasks","Buddy_System_Allocator","DYNAMIC_ALLOCATOR","SimpleAllocator","alloc","alloc_error_handler","alloc_zeroed","borrow","borrow_mut","dealloc","empty","from","init_heap","into","realloc","try_from","try_into","type_id","CLINT_ADDR_","CONFIG_CPU_CLOCK_HZ","CONFIG_ISR_STACK_SIZE_WORDS","CONFIG_MTIMECMP_BASE_ADDRESS","CONFIG_MTIME_BASE_ADDRESS","CONFIG_TICK_RATE_HZ","KERNEL_HEAP_SIZE","LSR_BI","LSR_DR","LSR_EIRF","LSR_FE","LSR_OE","LSR_PE","LSR_TEMT","LSR_THRE","REG_BRDH","REG_BRDL","REG_FCR","REG_IER","REG_IIR","REG_LCR","REG_LSR","REG_MCR","REG_MSR","REG_RBR","REG_SCR","REG_THR","USER_STACK_SIZE","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","configMAX_PRIORITIES","configMAX_PRIORITIES_","deref","deref","deref","deref","from","from","from","from","into","into","into","into","portTICK_RATE_MS","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","EventBits","EventGroupDefinition","EventGroupHandle","borrow","borrow_mut","clone","clone_into","default","eventCLEAR_EVENTS_ON_EXIT_BIT","eventEVENT_BITS_CONTROL_BYTES","eventUNBLOCKED_DUE_TO_BIT_SET","eventWAIT_FOR_ALL_BITS","from","into","prvTestWaitCondition","to_owned","try_from","try_into","type_id","ucStaticallyAllocated","uxEventBits","uxEventGroupNumber","vEventGroupDelete","xEventGroupClearBits","xEventGroupCreate","xEventGroupSetBits","xEventGroupWaitBits","xTasksWaitingForBits","CURRENT_TCB","DELAYED_TASK_LIST","IDLE_STACK","IDLE_p","Not_Started","OVERFLOW_DELAYED_TASK_LIST","PENDING_READY_LIST","READY_TASK_LISTS","Running","SUSPENDED_TASK_LIST","SchedulerState","Suspended","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","kernel_init","panic","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ListItemLink","ListItemOwnerWeakLink","ListItemT","ListItemWeakLink","ListRealLink","ListT","ListWeakLink","XList","XListItem","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","fmt","fmt","from","from","get_c_owner_of_head_entry","get_owner_of_head_entry","get_owner_of_next_entry","insert","insert_end","into","into","list_current_list_length","list_get_c_owner_of_head_entry","list_get_end_marker","list_get_head_entry","list_get_num_items","list_get_owner_of_head_entry","list_get_owner_of_next_entry","list_get_pxindex","list_get_value_of_head_entry","list_is_contained_within","list_is_empty","list_item_get_c_owner","list_item_get_container","list_item_get_next","list_item_get_owner","list_item_get_pre","list_item_get_value","list_item_set_container","list_item_set_next","list_item_set_owner","list_item_set_pre","list_item_set_value","list_set_pxindex","new","pv_owner","pv_owner_c","px_container","px_index","px_next","px_previous","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ux_list_remove","ux_number_of_items","v_list_insert","v_list_insert_end","x_item_value","x_list_end","errQUEUE_EMPTY","errQUEUE_FULL","pdFAIL","pdFALSE","pdPASS","pdTRUE","QueueDefinition","QueueHandle_t","Queue_t","borrow","borrow_mut","cRxLock","cTxLock","default","from","into","memcpy","pcHead","pcMesQueue","pcReadFrom","pcTail","pcWriteTo","pdPass","prvCopyDataFromQueue","prvCopyDataToQueue","prvGetDisinheritPriorityAfterTimeout","prvInitialiseNewQueue","prvInitialiseNewQueue","prvIsQueueEmpty","prvIsQueueFull","prvUnlockQueue","queueINT8_MAX","queueLOCKED_UNMODIFIED","queueOVERWRITE","queueQUEUE_TYPE_BASE","queueQUEUE_TYPE_BINARY_SEMAPHORE","queueQUEUE_TYPE_COUNTING_SEMAPHORE","queueQUEUE_TYPE_MUTEX","queueQUEUE_TYPE_RECURSIVE_MUTEX","queueSEND_TO_BACK","queueUNLOCKED","try_from","try_into","type_id","ucQueueType","uxItemSize","uxLength","uxMessagesWaiting","uxRecursiveCallCount","vQueueDelete","xMutexHolder","xQUEUE","xQueueCreate","xQueueCreate","xQueueGenericCreate","xQueueGenericCreate","xQueueGenericReset","xQueueGenericReset","xQueueGenericSend","xQueueGenericSendFromISR","xQueuePeek","xQueuePeekFromISR","xQueueReceive","xQueueReceiveFromISR","xQueueSend","xQueueSendFromISR","xTasksWaitingToReceive","xTasksWaitingToSend","SemaphoreHandle_t","prvInitialiseMutex","semGIVE_BLOCK_TIME","semSEMAPHORE_QUEUE_ITEM_LENGTH","xQueueCreateMutex","xSemaphoreCreateCounting","Param_link","StackType_t","StackType_t_link","TCB_set_pxStack","TCB_t","TCB_t_link","TaskFunction_t","TaskHandle_t","TimeOut","UBaseType_t","XSCHEDULERRUNNING","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_from_c","clone","clone_into","default","default","eBlocked","eDeleted","eInvalid","eReady","eRunning","eSuspended","eTaskState","fmt","from","from","from","into","into","into","pcTaskGetName","pcTaskName","prvAddCurrentTaskToDelayedList","prvAddNewTaskToReadyList","prvAddTaskToReadyList","prvGetTCBFromHandle","prvIdleTask","prvInitialiseNewTask","prvResetNextTaskUnblockTime","prvTaskIsTaskSuspended","pvTaskIncrementMutexHeldCount","pxPortInitialiseStack","pxStack","pxTopOfStack","taskEVENT_LIST_ITEM_VALUE_IN_USE","taskRECORD_READY_PRIORITY","taskSELECT_HIGHEST_PRIORITY","taskSELECT_HIGHEST_PRIORITY_TASK","taskSWITCH_DELAYED_LISTS","taskYield","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tskIDLE_PRIORITY","tskTCB","tskTaskControlBlock","type_id","type_id","type_id","uxBasePriority","uxCriticalNesting","uxCurrentNumberOfTasks","uxMutexesHeld","uxPriority","uxSchedulerSuspended","uxTaskPriorityGet","uxTaskResetEventItemValue","vTaskDelay","vTaskDelete","vTaskEnterCritical","vTaskExitCritical","vTaskInternalSetTimeOutState","vTaskPlaceOnEventList","vTaskPlaceOnUnorderedEventList","vTaskPriorityDisinheritAfterTimeout","vTaskPrioritySet","vTaskRemoveFromUnorderedEventList","vTaskResume","vTaskResumeAll","vTaskSetTimeOutState","vTaskStartScheduler","vTaskSuspend","vTaskSuspendAll","xEventListItem","xNextTaskUnblockTime","xNumOfOverflows","xOverflowCount","xPendedTicks","xPortSysTickHandler","xSchedulerRunning","xStateListItem","xTaskCheckForTimeOut","xTaskCreate","xTaskCreateStatic","xTaskDelayUntil","xTaskIncrementTick","xTaskPriorityDisinherit","xTaskPriorityInherit","xTaskRemoveFromEventList","xTickCount","xTimeOnEntering","xYieldPending","ns16550","portable","portmacro","riscv_virt","Device","addr","borrow","borrow_mut","from","into","readb","try_from","try_into","type_id","v_out_ns16550","writeb","ULL_MACHINE_TIMER_COMPARE_REGISTER_BASE","ULL_NEXT_TIME","X_ISRSTACK_","__private_field","__private_field","auto_set_currentTcb","borrow","borrow","borrow_mut","borrow_mut","deref","deref","from","from","get_current_tcb","get_mtime","into","into","is_current_tcb","is_current_tcb_raw","pullMachineTimerCompareRegister","pullNextTime","pxCurrentTCB","pxCurrentTCB_","set_current_tcb","try_from","try_from","try_into","try_into","type_id","type_id","uxTimerIncrementsForOneTick","vTaskSwitchContext","v_port_setup_timer_interrupt","xISRStackTop","xPortStartFirstTask","x_port_start_scheduler","BaseType","PORT_BYTE_ALIGNMENT","PORT_CRITICAL_NESTING_IN_TCB","PORT_MAX_DELAY","PORT_STACK_GROWTH","PORT_TICK_TYPE_IS_ATOMIC","StackType","TickType","UBaseType","USE_PORT_OPTIMISED_TASK_SELECTION","NS16550_ADDR","handle_trap","print","vSendString","x_get_core_id"],"q":["r_freertos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::ffi","","","","r_freertos::ffi::ffi","","","","","","r_freertos::ffi::queue","","","","","","","","","","","","","","","","","","","r_freertos::ffi::semphr","","","","","","","r_freertos::ffi::tasks","","","","","","","","","r_freertos::kernel","","","","","","","","","r_freertos::kernel::allocator","","","","","","","","","","","","","","","","","r_freertos::kernel::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::event_group","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::kernel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::projdefs","","","","","","r_freertos::kernel::queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::kernel::semphr","","","","","","r_freertos::kernel::tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::portable","","","","r_freertos::portable::ns16550","","","","","","","","","","","","r_freertos::portable::portable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r_freertos::portable::portmacro","","","","","","","","","","r_freertos::portable::riscv_virt","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","get current task handle as Arc","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","lock queue  accept QueueHandle_t","","","","","","","","","","","","","","","","","","","","","","","ffi general utils","Queue ffi for C","Semaphore ffi for C","Task ffi for C","Transform C char into rust string","Assert from C","Malloc memory from C","Print from C. Does not support formatting.","vSendString from C. Does not support formatting.","Yield from C","","Get RxLock of target queue handle.","Get TxLock of target queue handle.","Get uxMessagesWaiting of target queue handle.","Get available space of target queue handle.","The C version of vQueueDelete.","Set RxLock of target queue handle.","Set TxLock of target queue handle.","The C version of xQueueCreate.","The C version of xQueueGenericSend. The implement is …","The ISR version of prvIsQueueEmpty for C. Not impleted in …","The ISR version of prvIsQueueFull for C. Not impleted in …","The C version of xQueuePeekFromISR.","The C version of xQueueReceive. The implement is slightly …","The C version of xQueueReceiveFromISR.","The C version of xQueueReceive. The implement is slightly …","The C version of xQueueReset.","The C version of xQueueSendFromISR.","The C version of xQueueSend.","The C version of prvInitialiseMutex.","The C version of vSemaphoreDelete.","The C version of xQueueCreateMutex.","The C version of xSemaphoreCreateBinary.","The C version of xSemaphoreCreateCounting.","The C version of xSemaphoreGive.","The C version of xSemaphoreTake.","","Malloc new task handle from Rust and return to C.","The C version of taskENTER_CRITICAL.","The C version of taskEXIT_CRITICAL.","The C version of vTaskResume.","The C version of vTaskSuspend.","The C version of xTaskCreateStatic. pxTaskBuffer must be …","The C version of xTaskCreate. pxCreatedTask must be …","Return xTickCount to C program.","Global Allocatot Definition  use buddy_system_allocator …","Application specific definitions.  equal to …","","lazy static globals and kernel macros","Bidirectional linked list Definition and API","project defines","Queue Definition and api","","task control api","","DYNAMIC_ALLOCATOR as global_allocator","Critical Wrapped Buddy System Allocator","","alloc_error_handler function","","","","","","Returns the argument unchanged.","INITIAL Start should init_heap first","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Definition of event group.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return if bit condition is satisfied.","","","","","","","","Delete event group.","Clear target bits.","Create event group.","Set target bits to 1.","Wait until bit condition is satisfied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Init kernel during start.","Handle panic. Will loop when panic.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get owner stored in C standard of head entry in list.","Get owner of head entry in list.","Get owner of next entry in list.  Move current index to …","Insert target item into list in ascending order of value.  …","Insert target item into end of list.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get num of item in list.","Get owner of head entry in list.  Owner is saved as C ptr. ","Get end marker of list.  The end marker is not a valid …","Get head entry of list.  Head entry is the first valid …","Get num of item in list.","Get owner of head entry in list.  Does not alter current …","Get owner of next entry in list.  Move current index to …","Get current index of list.","Return the value of list’s head entry.","Return if the list item is contained within target list.","Return if the list is empty.","Get owner of item.  Owner is saved as C ptr.","Get container of item.","Get next item of target item.","Get owner of item.  Owner is a tskTaskControlBlock object.","Get previous item of target item.","Get value of item.  Insert() place item in order of values.","Set container of item.","Set next item of target item.","Set container of item.","Set previous item of target item.","Set value of item.  Insert() place item in order of values.","Set current index of list.","","Point to the linked list where the node is located, and …","","Point to the linked list where the node is located.","","Point to the next linked list item.","Point to the previous linked list item.","","","","","","","","Remove target item from its container. Return number of …","","Insert target item into list in ascending order of value.  …","Rnsert target item into end of list.","Used to help arrange nodes in order.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","queue header pointer","queue message space","position to read data","queue tail pointer","position to write data","","Copy data from queue to target address.","Copy data from target address to queue.","Get disinherit priority for mutex.","Initialise new queue.","","Return if queue is empty.","Return if queue is full.","Unlock queue and deal with operations during lock.","","","","","","","","","","","","","","","","","","","Delete target queue.","","","Create queue (user interface).","QueueCreate function","Create queue.","","Reset target queue.","","Send data to queue.","Send data to queue in ISR.","Get data from queue without removing it from queue.","Get data from queue in ISR without removing it from queue.","Receive data from queue. Received data is removed from …","Receive data from queue in ISR.  Received data is removed …","Send data to queue (user interface).","Send data to queue in ISR (user interface).","","","","Initialise mutex.","","","Create mutex.","Create counting Semaphore.","","","","Set pxStack of target tcb.","","","","","","","","","","","","","","mark for ffi","","","","","","","","","","","Enumerate states of task.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get name of target task.","Task name","Add current task to delayed list.","Add new task to ready list.","Add target task to ready list.","Get tcb from handle, return current tcb if handle is None.","Idle task function.","Initialise new task.","Reset NextTaskUnblockTime.","Return if target task is suspended.","Increase current task’s mutex count.  Return handle of …","initialise task stack space ( Extern C )","Stack bottom pointer","Stack top pointer","","Set max uxTopReadyPriority. Deprecated in current …","Find highest priority with valid task.","Set current tcb to task with highest priority.","In case of mtime overflow, swap delayed list and overflow …","Yield in task.","","","","","","","","","","tskTaskControlBlock","","","","","","","","Task priority","","Get priority of target task.","Reset event item value. Return original item value.","Delay Task xTicksToDelay Relativly. Used in task function.","Delete target task.","Enter task critical area.","Exit task critical area.","Set pxTimeOut to current time in ISR.","Place current task on event list and delay it.","Place target task on unordered event list. Used in event …","Disinherit and recover original priority for mutex holder …","Set priority of target task.","Remove target task from unordered event list. Used in …","Resume target task.","Resume scheduler.","Set pxTimeOut to current time in task.","Start scheduler.","Suspend task until resumed. Assert params is not …","Suspend scheduler.","Task evnet list pointer","","","","","Manually force tick increment outside ISR.","","Task status list pointer","Return if timeout has been reached.","Create task (dynamic).","Create task (static).","Delay task until pxPreviousWakeTime+pxPreviousWakeTime. …","Increase tick and free delayed task.","Disinherit and recover original priority for mutex holder …","Inherit mutex holder task’s priority to current task’s …","Remove first task from event list, and insert the task to …","","","","serial interface api","portable apis","portable macros","chip specific api","","Base addr of Serial Interface.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Read byte from target address.","","","","Write byte to serial interface.  Stall until writing is …","Write byte to target address.","","","","","","Copy current tcb to pxCurrentTCB for C interface.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","get current tcb","Get current mtime.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","return if target tcb is current tcb","","","","","","Set current tcb.  Use with auto_set_currentTcb().","","","","","","","","switch context","Setup timer interrupt during startup.","","","Start up scheduler.","","","","","","","","","","","","","","",""],"i":[1,2,1,2,1,2,1,2,0,1,2,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,3,3,3,3,3,3,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,4,5,6,7,4,5,6,7,0,0,4,5,6,7,4,5,6,7,4,5,6,7,0,4,5,6,7,4,5,6,7,4,5,6,7,0,0,0,8,8,8,8,8,0,0,0,0,8,8,0,8,8,8,8,8,8,8,0,0,8,0,0,8,0,0,0,0,9,0,0,0,9,0,0,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,16,17,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,16,17,0,0,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,16,17,0,0,0,0,0,0,0,0,0,18,19,18,19,19,19,18,19,18,19,18,19,19,19,19,19,19,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,18,19,18,18,19,18,19,18,19,18,19,0,19,0,0,18,19,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,0,20,20,20,20,20,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,0,20,0,0,20,0,20,0,20,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,21,22,23,23,23,23,22,23,21,21,21,21,21,21,0,23,21,22,23,21,22,23,0,23,0,0,0,0,0,0,0,0,0,0,23,23,0,0,0,0,0,0,23,21,22,23,21,22,23,0,0,0,21,22,23,23,23,0,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,22,0,0,0,23,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,24,24,24,24,24,0,24,24,24,0,0,0,0,0,25,26,0,25,26,25,26,25,26,25,26,0,0,25,26,0,0,0,0,0,0,0,25,26,25,26,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["task1handler",3]],["option",4]],[[["task2handler",3]],["option",4]],null,[[]],[[]],null,null,null,[[]],[[]],null,[[],["never",0]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_void",0]]],[[["c_void",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["usize",0]],["string",3]],[[["bool",0]]],[[["usize",0]],["usize",0]],[[["usize",0]]],[[["usize",0]]],[[]],null,[[["rwlock",0]],["i8",0]],[[["rwlock",0]],["i8",0]],[[["rwlock",0]],["usize",0]],[[["rwlock",0]],["usize",0]],[[["rwlock",0]]],[[["rwlock",0],["i8",0]]],[[["rwlock",0],["i8",0]]],[[["usize",0],["usize",0]],["rwlock",0]],[[["rwlock",0],["usize",0],["usize",0],["isize",0]],["isize",0]],[[["rwlock",0]],["bool",0]],[[["rwlock",0]],["bool",0]],[[["rwlock",0],["usize",0]],["isize",0]],[[["rwlock",0],["usize",0],["usize",0]],["isize",0]],[[["rwlock",0],["usize",0],["isize",0]],["isize",0]],[[["rwlock",0],["usize",0],["usize",0]],["isize",0]],[[["rwlock",0]],["isize",0]],[[["rwlock",0],["usize",0],["isize",0]],["isize",0]],[[["rwlock",0],["usize",0],["usize",0]],["isize",0]],[[["rwlock",0]]],[[["rwlock",0]]],[[["u8",0]],["rwlock",0]],[[],["rwlock",0]],[[["usize",0],["usize",0]],["rwlock",0]],[[["rwlock",0]],["isize",0]],[[["rwlock",0],["usize",0]],["isize",0]],null,[[],["rwlock",0]],[[]],[[]],[[["rwlock",0]]],[[["rwlock",0]]],[[["usize",0],["usize",0],["u32",0],["usize",0],["usize",0],["rwlock",0],["usize",0]],["rwlock",0]],[[["usize",0],["usize",0],["u32",0],["usize",0],["usize",0],["rwlock",0]],["isize",0]],[[],["usize",0]],null,null,null,null,null,null,null,null,null,null,null,null,[[["simpleallocator",3],["layout",3]],["u8",0]],[[["layout",3]],["never",0]],[[["simpleallocator",3],["layout",3]],["u8",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["simpleallocator",3],["u8",0],["layout",3]]],[[],["simpleallocator",3]],[[]],[[]],[[]],[[["simpleallocator",3],["u8",0],["layout",3],["usize",0]],["u8",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["config_mtime_base_address",3]],["usize",0]],[[["config_mtimecmp_base_address",3]],["usize",0]],[[["porttick_rate_ms",3]],["usize",0]],[[["configmax_priorities",3]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["eventgroupdefinition",3]],["eventgroupdefinition",3]],[[["",0],["",0]]],[[],["eventgroupdefinition",3]],null,null,null,null,[[]],[[]],[[["usize",0],["usize",0],["isize",0]],["isize",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]]]],[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]],["usize",0]],["usize",0]],[[],["eventgroupdefinition",3]],[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]],["usize",0]],["usize",0]],[[["arc",3,[["rwlock",3,[["eventgroupdefinition",3]]]]],["usize",0],["isize",0],["isize",0],["usize",0]],["usize",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ready_task_lists",3]]],[[["delayed_task_list",3]],["arc",3]],[[["overflow_delayed_task_list",3]],["arc",3]],[[["suspended_task_list",3]],["arc",3]],[[["pending_ready_list",3]],["arc",3]],[[["current_tcb",3]],["rwlock",3]],[[["idle_stack",3]]],[[["idle_p",3]],["arc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["panicinfo",3]],["never",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["xlist",3]],["xlist",3]],[[["",0],["",0]]],[[],["xlistitem",3]],[[],["xlist",3]],[[["xlistitem",3],["formatter",3]],["result",6]],[[["xlist",3],["formatter",3]],["result",6]],[[]],[[]],[[["xlist",3]],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],[[["xlist",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["xlist",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["xlist",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["xlist",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[]],[[]],[[["arc",3]],["usize",0]],[[["arc",3]],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],[[["arc",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["arc",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["weak",3]],["usize",0]],[[["arc",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["arc",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["arc",3]],["usize",0]],[[["arc",3],["arc",3]],["bool",0]],[[["arc",3]],["bool",0]],[[["weak",3]],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlist",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],[[["weak",3]],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],[[["arc",3]],["usize",0]],[[["weak",3],["weak",3,[["rwlock",3,[["xlist",3]]]]]]],[[["weak",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["arc",3],["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]],[[["weak",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["arc",3],["usize",0]]],[[["weak",3],["weak",3,[["rwlock",3,[["xlistitem",3]]]]]]],[[["usize",0]],["xlistitem",3]],null,null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["weak",3,[["rwlock",3,[["xlistitem",3]]]]]],["usize",0]],null,[[["arc",3],["arc",3]]],[[["arc",3],["arc",3]]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[],["queuedefinition",3]],[[]],[[]],null,null,null,null,null,null,null,[[["queuedefinition",3],["usize",0]]],[[["queuedefinition",3],["usize",0],["isize",0]],["bool",0]],[[["arc",3]],["usize",0]],[[["usize",0],["usize",0],["usize",0],["u8",0],["usize",0]]],[[["queuedefinition",3],["usize",0],["usize",0],["u8",0]]],[[["arc",3]],["bool",0]],[[["arc",3]],["bool",0]],[[["arc",3]]],null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]]],null,null,[[["usize",0],["usize",0]],["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],[[["usize",0],["usize",0]],["queuedefinition",3]],[[["usize",0],["usize",0],["u8",0]],["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],[[["usize",0],["usize",0],["u8",0]],["queuedefinition",3]],[[["queuedefinition",3],["isize",0]],["isize",0]],[[["queuedefinition",3],["isize",0]],["isize",0]],[[["arc",3],["usize",0],["usize",0],["isize",0]],["isize",0]],[[["arc",3],["usize",0],["isize",0],["isize",0]],["isize",0]],[[["arc",3],["usize",0],["usize",0]],["isize",0]],[[["arc",3],["usize",0]],["isize",0]],[[["arc",3],["usize",0],["usize",0]],["isize",0]],[[["arc",3],["usize",0],["isize",0]],["isize",0]],[[["arc",3],["usize",0],["usize",0]],["isize",0]],[[["arc",3],["usize",0],["isize",0]],["isize",0]],null,null,null,[[["arc",3]]],null,null,[[["u8",0]],["arc",3,[["rwlock",3,[["queuedefinition",3]]]]]],[[["usize",0],["usize",0]],["queuedefinition",3]],null,null,null,[[["arc",3],["usize",0]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["tsktaskcontrolblock",3]],["tsktaskcontrolblock",3]],[[["",0],["",0]]],[[],["timeout",3]],[[],["tsktaskcontrolblock",3]],null,null,null,null,null,null,null,[[["tsktaskcontrolblock",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,[["arc",3]]]],["str",0]],null,[[["usize",0],["bool",0]]],[[["arc",3]]],[[["arc",3]]],[[["option",4,[["arc",3]]]],["option",4,[["tsktaskcontrolblock",3]]]],[[["c_void",0]]],[[["usize",0],["str",0],["u32",0],["option",4,[["usize",0]]],["arc",3],["usize",0],["arc",3]],["arc",3]],[[]],[[["arc",3]],["bool",0]],[[],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],null,null,null,null,[[["usize",0]]],[[],["usize",0]],[[]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["usize",0]],[[],["usize",0]],[[["usize",0]]],[[["option",4,[["arc",3]]]]],[[]],[[]],[[["timeout",3]]],[[["arc",3],["usize",0]]],[[["arc",3],["usize",0],["usize",0]]],[[["option",4,[["arc",3]]],["usize",0]]],[[["option",4,[["arc",3]]],["usize",0]]],[[["arc",3],["usize",0]]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],[[],["bool",0]],[[["timeout",3]]],[[]],[[["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],[[]],null,null,null,null,null,[[]],null,null,[[["timeout",3],["usize",0]],["isize",0]],[[["usize",0],["str",0],["u32",0],["option",4,[["usize",0]]],["usize",0],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],["isize",0]],[[["usize",0],["str",0],["u32",0],["option",4,[["usize",0]]],["option",4,[["usize",0]]],["option",4,[["arc",3]]],["usize",0]],["option",4,[["arc",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]],[[["usize",0],["usize",0]]],[[]],[[["option",4,[["arc",3]]]],["isize",0]],[[["option",4,[["arc",3]]]],["isize",0]],[[["arc",3]],["bool",0]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["usize",0]],["u8",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["device",3],["u8",0]]],[[["u8",0],["usize",0]]],null,null,null,null,null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ull_machine_timer_compare_register_base",3]],["usize",0]],[[["x_isrstack_",3]],["arc",3]],[[]],[[]],[[],["option",4,[["tsktaskcontrolblock",3]]]],[[],["u64",0]],[[]],[[]],[[["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]],["bool",0]],[[["tsktaskcontrolblock",3]],["bool",0]],null,null,null,null,[[["option",4,[["weak",3,[["rwlock",3,[["tsktaskcontrolblock",3]]]]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],null,null,[[],["isize",0]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[["str",0]]],[[["str",0]]],[[],["i32",0]]],"p":[[3,"task1handler"],[3,"task2handler"],[3,"SimpleAllocator"],[3,"CONFIG_MTIME_BASE_ADDRESS"],[3,"CONFIG_MTIMECMP_BASE_ADDRESS"],[3,"portTICK_RATE_MS"],[3,"configMAX_PRIORITIES"],[3,"EventGroupDefinition"],[4,"SchedulerState"],[3,"READY_TASK_LISTS"],[3,"DELAYED_TASK_LIST"],[3,"OVERFLOW_DELAYED_TASK_LIST"],[3,"SUSPENDED_TASK_LIST"],[3,"PENDING_READY_LIST"],[3,"CURRENT_TCB"],[3,"IDLE_STACK"],[3,"IDLE_p"],[3,"XListItem"],[3,"XList"],[3,"QueueDefinition"],[4,"eTaskState"],[3,"TimeOut"],[3,"tskTaskControlBlock"],[3,"Device"],[3,"ULL_MACHINE_TIMER_COMPARE_REGISTER_BASE"],[3,"X_ISRSTACK_"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
